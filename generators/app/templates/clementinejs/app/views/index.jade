html(ng-app="clementineJS")
	head
		title clementine.js - A lightweight MEAN stack boilerplate.
		link(type="text/css" rel="stylesheet" href="public/css/main.min.css")
	body
		.navbar(ng-controller="linkCtrlr")
			h1
				a.nav-logo(href="/")
			ul.nav
				li(material-ripple="")
					a.nav-button(href="#about_location" ng-click="delayLinkNav($event)") ABOUT
				li(material-ripple="")
					a.nav-button(href="#demo_location" ng-click="delayLinkNav($event)") DEMO
				li(material-ripple="")
					a.nav-button(href="#features_location" ng-click="delayLinkNav($event)") FEATURES
				li(material-ripple="")
					a.nav-button(href="http://johnstonbl01.github.io/clementinejs" target="_blank" ng-click="delayLinkNav($event)") DOCS

		.banner
			.banner-background
				.title
					img.logo(src="public/img/clementine_white.png")
					.clemjs clementine.js
							p A lightweight full-stack MEAN boilerplate.

							.buttons(ng-controller="linkCtrlr")
								a.twitter(href="https://twitter.com/johnstonbl01" material-ripple="" ng-click="delayLink($event)")
									img(src="public/img/twitter_logo_32x26.png")
								a.github(href="https://github.com/johnstonbl01/clementinejs" target="_blank" material-ripple="" ng-click="delayLink($event)")
									img(src="public/img/github_32px.png")
								a.email(href="mailto:johnstonbl01@gmail.com" target="_blank" material-ripple="" ng-click="delayLink($event)")
									img(src="public/img/mail_32x28.png")
		.content
			.container
				.about
					.textcontent#about_location 
						h3.headline About Clementine.js
							img(src="public/img/html5_css3.png").html-css
							p
								| Clementine.js started as a personal project to create boilerplate that would help me easily stand up
								| a new project using the MEAN stack (MongoDB, Express, Angular.js & Node.js). As a novice, I found
								| that other boilerplates were often too feature-rich and contained a lot of overhead.
								br
								br
								| The purpose of Clementine.js is to provide a lightweight boilerplate for projects where the developer
								| wishes to perform most of the integration himself without having to remove many (or any) features.
								br
								br
								| Currently, Clementine.js is relatively simple and lacks a few essential features: linting & tests to name
								| a few. However, I believe that it can be a great start for many beginner-level projects. Over the course
								| of the next several months, Clementine.js will evolve to include the missing features and offer a rich, 
								| but lightweight boilerplate for MEAN stack projects.
							
						h3.headline Easy to Start, Great for Beginners
							img(src="public/img/code_excerpt.png").code-excerpt
							p
								| Get started with development quickly by cloning the repo. The underpinnings of the MEAN stack are already
								| configured and ready to use! If you're a beginner, Clementine.js offers an easy-to-understand structure
								| for building your first application.
								br
								br
								| Over the coming weeks, I'll be owrking to add comments to all the code.
								| Additionally, the docs provide a great resource for someone learning the MEAN stack and offer a step-by-step
								| guide to create your first application! Feel free to contact me via Twitter or GitHub with any questions.
					
					.textcontent#community
						h3.headline Community-Driven
							img(src="public/img/octocat.png").gh-octocat
							img(src="public/img/osi_standard_logo.png").open-source
							p
								| Clementine.js is developed in the open, and the repo is to fork available on GitHub. Contribution and community
								| are encouraged and will help take Clementine.js to the next level. 
								br
								br
								| If you have any specific questions about contribution, please visit the GitHub page and read the contribution
								| guidelines. If you're still stuck, contact me on GitHub by submitting an issue or catch me on Twitter.

				.demo
					.textcontent#demo_location
						h3.headline Demonstration
							

							.comments(ng-controller="commentCtrlr")

								ul.commentlist
									li(ng-repeat="comment in comments | limitTo: limitQuantity | orderBy: orderProperty")
										h3 {{comment.email}}
										p {{comment.comments}}
								.newcomment
									form(name="commentForm" novalidate)
										.input-container(ng-class="{ 'has-error' : commentForm.email.$invalid && !commentForm.email.$pristine }")
											input(type="email" ng-model="commentEmail" required name="email").email-input
											span.highlight
											span.underline
											label.input-content(ng-class="{ 'touched-input' : commentForm.email.$touched && commentForm.email.$invalid }") Email
											label.email-validation(ng-show="commentForm.email.$invalid && !commentForm.email.$pristine") Please enter a valid email.

										.input-container
											input(type="text" ng-model="commentBody" required).comment-input
											span.highlight
											span.underline
											label.input-content Comment
										br
										.input-button-container
											button(type="submit" material-ripple="" ng-click="createComment()" ng-disabled="commentForm.$invalid").savecomment SAVE
										.input-button-container
											button(ng-click="deleteComments()" material-ripple="").deletecomments DELETE COMMENTS
							p
								| To the right is a simple demonstration of the MEAN stack using a sample comment section. 
								| The example is fully configured, and the comments persist even after reloading because
								| the application is data is being written to the Mongo database rather than temporarily
								| storing it in the browser.
								br
								br
								| Each time the SAVE button is clicked, Angular sends a POST HTML request to the local API, 
								| which in turn sends the information to Express. Express and Node then route this information
								| and insert the new data into the Mongo database.
								br
								br
								| Similarly, the DELETE comments button follows the same pathway, removing all comments within
								| the array and the database (except for the default comment). A comment gets inserted into the
								| database when the app is started and the database is empty.
								br
								br
								| The results are limited to only 5, but it's definitely possible to change this very easily in Angular.
								| If you're interested in learning how to create this application, please check out the Tutorial in the
								| documentation.

				.features
					.textcontent#features_location
						h3.headline Why use Clementine.js?
							ul.features-list
								li Simple and easy to understand architecture
								li Beginner and bare versions
								li Step-by-step beginner MEAN tutorial
								li Gulp build system
								li Sass CSS syntax
								li Jade HTML syntax
								li Mongoose schemas for MongoDB
								li NPM & Bower package management
								li Really great citrus-related colors & images

							p
								| Compared to similar boilerplates, Clementine is meant to be a simpler alternative withou the bells and
								| whistles. Occasionally, you will want a more robust boilerplate for your project, but in some cases
								| all of the extraneous features are not necessary. This is particularly true when learning to code, as
								| some of the additional features and architecture can obfuscate the details that are important for learning.
								br
								br
								| That said, Clementine.js does include a few bells and maybe a whistle or two. Each of the features on the right
								| can be easily removed from the boilerplate for a bare bones experience. This is detailed in the setup 
								| documentation.

				.libraries
					.libraries-row-one
						a.mongodb(href="http://www.mongodb.com/" target="_blank")
							img(src="public/img/mongodb_logo.png")
						a.express(href="http://expressjs.com/" target="_blank")
							p Express
						a.angularjs(href="https://angularjs.org/" target="_blank")
							img(src="public/img/angular_logo.png")
						a.nodejs(href="https://nodejs.org/" target="_blank")
							img(src="public/img/node_logo.svg")
					.libraries-row-two
						a.gulpjs(href="http://gulpjs.com/" target="_blank")
							img(src="public/img/gulp_logo.svg")
						a.jade(href="http://jade-lang.com/" target="_blank")
							img(src="public/img/jade_logo.png")
						a.mongoose(href="http://mongoosejs.com/" target="_blank")
							p mongoose
						a.bower(href="http://bower.io/" target="_blank")
							img(src="public/img/bower_logo.png")
							p Bower
				.license
					p Licensed under MIT.


		script(type="text/javascript" src="/public/lib/angular/angular.min.js")
		script(type="text/javascript" src="/public/lib/angular-resource/angular-resource.min.js")
		script(type="text/javascript" src="/public/scripts/site.js")